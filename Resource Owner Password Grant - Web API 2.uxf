<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="12.2">
  <zoom_level>10</zoom_level>
  <element>
    <type>com.umlet.element.SequenceDiagram</type>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>1130</w>
      <h>530</h>
    </coordinates>
    <panel_attributes>title: Resource Owner Password Credentials Grant
_Person~P_|_|_Mobile App~M_|_|_|_WebAPI~W_
P-&gt;&gt;M:P,M:username, password
M-&gt;&gt;W:P,M,W:Basic Auth {client id, client secret} POST{username, password}
W-&gt;W:P,M,W:Provider.MatchEndpoint
W-&gt;W:P,M,W:Provider.ValidateClientAuthentication
W-&gt;W:P,M,W:Provider.ValidateTokenRequest
W-&gt;W:P,M,W:Provider.GrantResourceOwnerCredentials 
W-&gt;W:P,M,W:Provider.TokenEndpoint
W-&gt;W:P,M,W:AccessTokenProvider.CreateAsync
W-&gt;W:P,M,W:RefreshTokenProvider.CreateAsync
W-&gt;&gt;M:P,M,W:Access Token, Refresh Token
P-&gt;&gt;M:P,M,W:Interaction
M-&gt;&gt;W:P,M,W:Request for resource
W-&gt;W:P,M,W:BearerAuthenticationProvider.ValidateIdentity
W-&gt;&gt;M:P,M,W:Fulfill request


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1150</x>
      <y>0</y>
      <w>510</w>
      <h>510</h>
    </coordinates>
    <panel_attributes>elementstyle=wordwrap
elementstyle=autoresize
halign=left
valign=top
*Resource Owner Password Credentials Grant*
--
_Provider.MatchEndpoint_

--
_Provider.ValidateClientAuthentication_
1. Retrieve client id and client secret from basic authentication header
2. Authenticate client
3. context.Validated(clientId);

--
_Provider.ValidateTokenRequest_

--
_Provider.GrantResourceOwnerCredentials_
1. Ensure client is permitted to use Resource Owner Password Credentials Grant
2. Authenticate the user using username and password
3. Verify that the user's org and client's org match
4. Create a session in the database
5. Add claims/scope
6. context.Validated(...)

--
_Provider.TokenEndpoint_
1. Add any additional properties to be communicated to the client

--
_AccessTokenProvider.CreateAsync_

--
_RefreshTokenProvider.CreateAsync_
1. Generate Guid
2. Add Guid as refresh token to session table of database
3. context.SetToken(refreshToken.ToString())

--
_BearerAuthenticationProvider.ValidateIdentity_
1. Validate framework has populated user identity in context.Ticket
2. Check sessions database table to ensure user hasn't logged out or relogged in</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1150</x>
      <y>520</y>
      <w>360</w>
      <h>470</h>
    </coordinates>
    <panel_attributes>elementstyle=wordwrap
elementstyle=autoresize
halign=left
valign=top
*Refresh Token Grant*
--
_Provider.MatchEndpoint_

--
_Provider.ValidateClientAuthentication_
Same code as before

--
_RefreshTokenProvider.ReceiveAsync_
1. Look up Guid in Database, retrieve session
2. Validate that organization in client and session match
3. Verify refresh token has not expired
4. Create Authentication Ticket
5. Set issued and expiration date
6. context.SetTicket(ticket);

--
_Provider.ValidateTokenRequest_

--
_Provider.GrantRefreshToken_
1. Verify ticket is present and set
2. Verify user org matches client org
3. Create a session in the database
4. context.Validated();

_Provider.TokenEndpoint_

--
_AccessTokenProvider.CreateAsync_

--
_RefreshTokenProvider.CreateAsync_
Already covered
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.SequenceDiagram</type>
    <coordinates>
      <x>0</x>
      <y>950</y>
      <w>860</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>title: Token Revocation
_Person~P_|_|_Mobile App~M_|_|_|_WebAPI~W_
P-&gt;&gt;M:P,M,W:Log Out/Exit
M-&gt;&gt;W:P,M,W:Revoke Basic Auth{client id, client secret} POST {token}
W-&gt;M:P,M,W:200 OK
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>880</x>
      <y>1000</y>
      <w>410</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>elementstyle=wordwrap
elementstyle=autoresize
halign=left
valign=top
*Token Revocation*
--
_OAuthBearerAuthenticationProvider.ValidateIdentity_
1. Authenticate the Basic Auth client via client id and client secret
2. Verify client is enabled and active
3. Resolve the token into a user
4. Refresh the user from the database
5. Verify user's org and client's org matches
6. Verify the user's session was created by that client
7. Verify sessions exist at all
8. Delete all active sessions (access token and refresh token)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.SequenceDiagram</type>
    <coordinates>
      <x>0</x>
      <y>540</y>
      <w>1080</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>title: Refresh Token Grant
_Person~P_|_|_Mobile App~M_|_|_|_WebAPI~W_
M-&gt;&gt;W:P,M,W:Basic Auth {client id, client secret} POST {refresh_token}
W-&gt;W:P,M,W:Provider.MatchEndpoint
W-&gt;W:P,M,W:Provider.ValidateClientAuthentication
W-&gt;W:P,M,W:RefreshTokenProvider.ReceiveAsync 
W-&gt;W:P,M,W:Provider.ValidateTokenRequest
W-&gt;W:P,M,W:Provider.GrantRefreshToken 
W-&gt;W:P,M,W:Provider.TokenEndpoint
W-&gt;W:P,M,W:AccessTokenProvider.CreateAsync
W-&gt;W:P,M,W:RefreshTokenProvider.CreateAsync</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.SequenceDiagram</type>
    <coordinates>
      <x>0</x>
      <y>1180</y>
      <w>1290</w>
      <h>470</h>
    </coordinates>
    <panel_attributes>title: Client Credentials Grant
_Person~P_|_|_Mobile App~M_|_|_|_WebAPI~W_
M-&gt;&gt;W:P,M,W:Basic Auth {client id 2, client secret 2}
W-&gt;W:P,M,W:Provider.MatchEndpoint
W-&gt;W:P,M,W:Provider.ValidateClientAuthentication
W-&gt;W:P,M,W:Provider.ValidateTokenRequest
W-&gt;W:P,M,W:Provider.Provider.GrantClientCredentials
W-&gt;W:P,M,W:Provider.TokenEndpoint
W-&gt;W:P,M,W:AccessTokenProvider.CreateAsync
W-&gt;W:P,M,W:RefreshTokenProvider.CreateAsync - Do Not Provide Refresh Tokens!
W-&gt;&gt;M:P,M,W:Access Token
M-&gt;&gt;W:P,M,W:Request for resource
W-&gt;W:P,M,W:BearerAuthenticationProvider.ValidateIdentity
W-&gt;&gt;M:P,M,W:Fulfill request</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1310</x>
      <y>1200</y>
      <w>510</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>elementstyle=wordwrap
elementstyle=autoresize
halign=left
valign=top
*Client Credentials Grant*
--
_Provider.MatchEndpoint_

--
_Provider.ValidateClientAuthentication_
Same code as Resource Owner Password Credentials Grant

--
_Provider.ValidateTokenRequest_

--
_Provider.GrantClientCredentials_
1. Ensure client is permitted to use Client Credentials Grant
2. Create identity and apply claims/scope
3. Shorten access token expiration
4. context.Validated(...)

--
_Provider.TokenEndpoint_
Same as Resource Owner Password Credentials Grant

--
_AccessTokenProvider.CreateAsync_

--
_RefreshTokenProvider.CreateAsync_
Do not generate a refresh token for Client Credentials Grant

--
_BearerAuthenticationProvider.ValidateIdentity_
1. Validate framework has populated user identity in context.Ticket
2. Check sessions database table to ensure user hasn't logged out or relogged in</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
